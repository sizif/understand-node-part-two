Lecture 27: Exports vs. module exports

note: in /l27, greet.js

When our code is run through node, it's wrapped in a 
function expression, "almost an iife".

The require function returns module.exports. It's returning
the property on the module object.

However, exports does not work for all the module patterns
shown previously.

You'd think they are the same object, but they don't return the same:
console.log(exports);           // returns [Function]
console.log(module.exports);    // returns {}

There's a quirk in JS when setting a var equal to a value.

module.exports still points to an Object,
but 
exports = to a value creates a new Object in memory.

Originally, module.exports and exports were pointing to the same object in
memory, but once "exports =" was used, a new object was made and the
connection was broken.

So, when it comes to "exports" I can't override it, I can't use "equals".
However, I can change it, that is to say, I can add a new property, or a 
new method. I can cahnge it, I can mutate it.

MUTATE:
To change something.

For example, adding a method or property to an object means you've mutated
the object.

So now I'll mutate the object in greet2.js.

Run node app2.js to see the difference between greet.js module and
greet2.js module printed in node console.

Why did it work in app2, and not in app1?

IMPORTANT ANSWER: Because I simply mutated, I added, I changed the object,
I did not change the reference.
I can now call greet2.greet(), because I added the property.

I can use only "exports", but only if I mutate the object, I can't replace
the object with something else.

I like to lower my cognitive load while coding (that is, how many things I
think about at one time).

Just use module.exports!

l28: REQUIRING NATIVE (CORE) MODULES

What do they do? See here: https://nodejs.org/api/

READ IT!

To require util, I can just:

var util = require('util');

And now I have an object that has all the niceities of that utility feature.

I the meantime, in app-l28-01.js, is an example of using the util native
module in my code.


l29 - MODULES AND ES6
---------------------

The new syntax for modules in es6 is very powerful.

greet-l29-01.js and app-l29-01.js

DOES NOT WORK IN node 4.5.

l30 - WEB SERVER CHECKLIST
--------------------------
Better ways to organize code into reusable pieces
Ways to deal with files
Ways to deal with databases
The ability to communicate over the internet
the ability to accept requests and send responses (in the standard format)
A way to deal with work that takes a long time

l31 - EVENTS AND THE EVENT EMITTER
----------------------------------

System Events (C++ Core: libuv) - VS - Custom Events (JS core: event emitter)

As we're about to see, the JavaScript side is faking it, it's not
real events. Because JS does not have an eventing concept, there is
no Event object in JS.

But we can fake it, we can create our own event library, with the
technique that the node Event Emitter uses.

We'll build our own Event Emitter to understand how node uses its
Event Emmiter and all the native code that comes on top of it.

l32 - OBJECT PROPERTIES AND METHODS
-----------------------------------

l33 - THE NODE EVENT EMITTER PART 1
-----------------------------------

I'll create an emmiter module, that will allow us to say that an event
happened, and to react to it.

function Emitter() {
    this.events = {};
}

/*
1.
"Emitter.prototype." = prototype of any object created with 
the above constructor function
*/ 
Emitter.prototype.
    
}

/*
2.
The first method of the prototype will be called 'on', 
and it will be a function
*/
Emitter.prototype.on = function() {

}

/*
3.
What will this function take? It will take 2 params, the type of event
that I want, and the 'listener'
*/
Emitter.prototype.on = function(type, listener) {

}

/*
4.
What's an event listener?
THE CODE THAT RESPONDS TO AN EVENT. When the event happens, the code is run.
In JS's case, the listener will be a function.
You can have many listeners listening for the same event, all over your code.
The listeners won't be invoked simultaneously, but 1 at a time in JS case.

My method 'on' is essentially, to add listeners. It's very common to add 'on'
when setting up events to listen to in programming, cuz it reads nicely.
*/
Emitter.prototype.on = function(type, listener) {

}

/*
5.
the 'type' will be the type of event. Again, these aren't real events,
this is just a trick. So my .events property is an object, and remember,
I can access properties on that object with a string.
*/
Emitter.prototype.on = function(type, listener) {
    this.events[type]
}

/*
6.
Let's check if the property exists, if it doesn't set it to empty array.
*/
Emitter.prototype.on = function(type, listener) {
    this.events[type] - this.events[type] || [];
}

THE FULL CODE SO FAR:
function Emitter() {
    this.events = {
        prop: []; // this just describes what happens in **
    };
}

Emitter.prototype.on = function(type, listener) {
    this.event[type] = this.events[type] || []; // **: if it doesn't exist, mk []
}

/*
7.
So I have now this  array, (that is a property):
this.events = {};

, and the property name will be whatever I put into the 'type' slot:
...function(TYPE... {
    this.events[TYPE] = this.events[TYPE]...
*/

/*
8.
And then I'm going to push my listener function into the array:
*/
function Emitter() {
    this.events = {};
}

Emitter.prototype.on = function(type, listener) {
    this.events[type] = this.events[type] || [];
    this.events[type].push(listener);
}

/*
So, this is a property on an object:
this.events[type]

It is an array. 

And I'm adding a function on it:
... .push(listener);

So if I was to look at the object afterwards, it would essentially be an
object {}, then a property name, whatever is in 'type', so maybe it's 
'onFileSave', or gotSomethingFromInternet, whatever it is, and then it will
be an array:

{
    onFileSave...
}

{
    gotSomethingFromInternet: []
}

AND IN THAT ARRAY, will be functions:
{
    gotSomethingFromInternet: [function() {}, function() {}, ...]
}

Every time I push a new function, I'll get a new item in the array.

THAT'S ALL on IS ACTUALLY DOING:
1. create a new property on the object      # this.events[type] #
2. make sure it is an array                 # ... || [] #
3. start adding functions into that array   # .push(listener);

l33 / 5:05 

*/







